{"version":3,"sources":["components/layout/NavBar.module.css","components/layout/Layout.module.css","components/daily-weather/DailyWeather.module.css","components/layout/Card.module.css","pages/HomePage.module.css","components/menu/MenuButton.js","components/layout/NavBar.js","components/layout/Layout.js","pages/HourlyForecastPage.js","functionality/IconNameSelection.js","components/daily-weather/DailyWeather.js","components/layout/Card.js","functionality/LocaleStrings.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","MenuButton","props","NavBar","className","styles","logo","Layout","main","children","HourlyForecastPage","iconRelations","faSun","faMoon","faCloudSun","faCloud","faCloudRain","faCloudSunRain","faCloudMoonRain","faPooStorm","faSnowflake","faSmog","faRainbow","iconNameSelection","iconName","DailyWeather","dailyWeatherCard","weekDay","icon","style","fontSize","Card","card","weekdays","day","locale","weekday","diasSemana","HomePage","useState","setCity","list","setList","useEffect","fetch","then","response","json","data","console","log","city","filter","value","index","Clean5DaysForecastData","cityData","listData","forEach","item","date","Date","dt_txt","getDay","title","map","idx","weather","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,uB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,uB,mBCAzBD,EAAOC,QAAU,CAAC,iBAAmB,yC,mBCArCD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,MAAQ,0B,4JCOXC,MANf,SAAoBC,GAChB,OACI,8B,iBCUOC,MAXf,SAAgBD,GACZ,OACI,mCACI,qBAAKE,UAAWC,IAAOC,KAAvB,wBAGA,cAAC,EAAD,Q,iBCKGC,MAXf,SAAgBL,GACZ,OACI,qCACI,cAAC,EAAD,IACA,sBAAME,UAAWC,IAAOG,KAAxB,SACKN,EAAMO,eCDRC,MAPf,SAA4BR,GACxB,OACI,mCACI,6C,gCCANS,EAAgB,CAClB,MAAOC,IACP,MAAOC,IACP,MAAOC,IACP,MAAOC,IACP,MAAOA,IACP,MAAOA,IACP,MAAOA,IACP,MAAOC,IACP,MAAOA,IACP,MAAOC,IACP,MAAOC,IACP,MAAOC,IACP,MAAOA,IACP,MAAOC,IACP,MAAOA,IACP,MAAOC,IACP,MAAOA,IACP,QAAWC,KAER,SAASC,IAAyD,IAAvCC,EAAsC,uDAA3B,GACzC,OAAIb,EAAca,IAA0B,YAAbA,EACpBb,EAAca,GAGdb,EAAa,QCZbc,MAZf,SAAsBvB,GAClB,OACI,sBAAKE,UAAWC,IAAOqB,iBAAvB,UACI,6BAAKxB,EAAMyB,UACX,kDACA,cAAC,IAAD,CAAiBC,KAAML,EAAkBrB,EAAM0B,MAAOC,MAAO,CAAEC,SAAU,UACzE,0CACA,+C,iBCDGC,MARf,SAAc7B,GACV,OACI,qBAAKE,UAAWC,IAAO2B,KAAvB,SACK9B,EAAMO,Y,iBCLZ,SAASwB,IAAkC,IAAzBC,EAAwB,uDAAlB,EAAGC,EAAe,uDAAN,KACjCC,EAAU,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC7EC,EAAa,CAAC,UAAW,QAAS,SAAU,eAAa,SAAU,UAAW,aACpF,OAAQF,GACJ,IAAK,KACD,OAAOC,EAAQF,GACnB,KAAK,EACD,OAAOG,EAAWH,GACtB,QACI,MAAO,qBC+CJI,MAlDf,SAAkBpC,GACd,MAAwBqC,mBAAS,IAAjC,mBAAaC,GAAb,WACA,EAAwBD,mBAAS,IAAjC,mBAAOE,EAAP,KAAaC,EAAb,KA4BA,OAnBAC,qBAAU,WACNC,MAAM,0HACDC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACHC,QAAQC,IAAIF,GACZ,MAfZ,SAAgCA,GAK5B,MAAO,CAJMA,EAAKG,KACGH,EAAKP,KAAKW,QAAO,SAACC,EAAOC,GAC1C,OAAOA,EAAQ,IAAM,MAYYC,CAAuBP,GAApD,mBAAOQ,EAAP,KAAiBC,EAAjB,KACAjB,EAAQgB,GACRd,EAAQe,GACRR,QAAQC,IAAIO,QAErB,CAACf,IACJC,qBAAU,WACNF,EAAKiB,SAAQ,SAAAC,GACT,IAAMC,EAAO,IAAIC,KAAKF,EAAKG,QAC3Bb,QAAQC,IAAIjB,EAAS2B,EAAKG,gBAE/B,CAACtB,IAEA,qCACI,oBAAIrC,UAAWC,IAAO2D,MAAtB,kCAEA,cAAC,EAAD,UAEQvB,EAAKwB,KAAI,SAACN,EAAMO,GACZ,IAAMN,EAAO,IAAIC,KAAKF,EAAKG,QAC3B,OAAO,cAAC,EAAD,CAAwBnC,QAASM,EAAS2B,EAAKG,UAAWnC,KAAM+B,EAAKQ,QAAQ,GAAGvC,MAA7DsC,YCvBnCE,MAff,WACE,OACE,cAAC,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,kBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,YCFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAQC,SAAS,mBAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eacb386d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"NavBar_logo__2C6RD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dailyWeatherCard\":\"DailyWeather_dailyWeatherCard__3cc4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1ZQtN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomePage_title__2SwkK\"};","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction MenuButton(props) {\n    return (\n        <></>\n    );\n}\n\nexport default MenuButton;","import MenuButton from '../menu/MenuButton';\nimport styles from './NavBar.module.css';\n\nfunction NavBar(props) {\n    return (\n        <header>\n            <div className={styles.logo}>\n                WeatherApp\n            </div>\n            <MenuButton />\n        </header>\n    );\n}\n\nexport default NavBar;\n","import NavBar from \"./NavBar\";\nimport styles from './Layout.module.css';\n\nfunction Layout(props) {\n    return (\n        <>\n            <NavBar />\n            <main className={styles.main}>\n                {props.children}\n            </main>\n        </>\n    );\n\n}\nexport default Layout;","function HourlyForecastPage(props) {\n    return (\n        <>\n            <h1>Forecast</h1>\n        </>\n    );\n}\nexport default HourlyForecastPage;","import { faSun, faCloudSun, faCloud, faCloudRain, faCloudSunRain, faCloudMoonRain, faPooStorm, faSnowflake, faSmog, faRainbow, faMoon } from \"@fortawesome/free-solid-svg-icons\";\n///iconRelations keys according to openweather API available icons, and values\n///according to  available icons in fontawesome free package\nconst iconRelations = {\n    '01d': faSun,\n    '01n': faMoon,\n    '02d': faCloudSun,\n    '03d': faCloud,\n    '03n': faCloud,\n    '04d': faCloud,\n    '04n': faCloud,\n    '09d': faCloudRain,\n    '09n': faCloudRain,\n    '10d': faCloudSunRain,\n    '10n': faCloudMoonRain,\n    '11d': faPooStorm,\n    '11n': faPooStorm,\n    '13d': faSnowflake,\n    '13n': faSnowflake,\n    '50d': faSmog,\n    '50n': faSmog,\n    'default': faRainbow\n}\nexport function iconNameSelection(iconName = '', icons = iconRelations) {\n    if (iconRelations[iconName] && iconName !== 'default') {\n        return iconRelations[iconName];\n    }\n    else {\n        return iconRelations['default'];\n    }\n}\n\n/*\n    icons:\n    openweather=fontAwesome\n    01d=faSun\n    02d=faCloudSun\n    03d=03n=faCloud\n    04d=04n=faClouds(just faCloud, bc faClouds is pro)\n    09d=09n=faCloudRain\n    10d=faCloudSunRain\n    11d=11n=faPooStorm\n    13d=13n=faSnowFlake\n    50d=50n=faSmog (bc fog is pro)\n    01n=faMoon\n    02n=faCloudMoon\n    10n=faCloudMoonRain\n*/","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport styles from './DailyWeather.module.css';\nimport { iconNameSelection } from \"../../functionality/IconNameSelection\";\n\nfunction DailyWeather(props) {\n    return (\n        <div className={styles.dailyWeatherCard}>\n            <h3>{props.weekDay}</h3>\n            <p>March 1st, 1:00pm</p>\n            <FontAwesomeIcon icon={iconNameSelection(props.icon)} style={{ fontSize: '5rem' }} />\n            <h2>25 °C</h2>\n            <h4>Clear sky</h4>\n        </div>\n    );\n}\n\nexport default DailyWeather;","import styles from './Card.module.css';\n\nfunction Card(props) {\n    return (\n        <div className={styles.card}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Card;","export function weekdays(day = 0, locale = 'en') {\n    const weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const diasSemana = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\n    switch (locale) {\n        case 'en':\n            return weekday[day];\n        case 'es' | 'sp':\n            return diasSemana[day];\n        default:\n            return 'Inalid day number';\n    }\n};\n\nexport function monthName(month = 0, locale = 'en') {\n    const monthName = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const mesNombre = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    switch (locale) {\n        case 'en':\n            return monthName[month];\n        case 'es' | 'sp':\n            return mesNombre[month];\n        default:\n            return 'Invalid month number';\n    }\n}","import { useEffect, useState } from \"react\";\nimport DailyWeather from \"../components/daily-weather/DailyWeather\";\nimport Card from \"../components/layout/Card\";\nimport styles from './HomePage.module.css';\nimport { weekdays, monthName } from '../functionality/LocaleStrings';\n\nfunction HomePage(props) {\n    const [city, setCity] = useState({});\n    const [list, setList] = useState([]);\n    function Clean5DaysForecastData(data) {\n        const city = data.city;\n        const filteredList = data.list.filter((value, index) => {\n            return index % 8 === 0;\n        });\n        return [city, filteredList];\n    }\n\n    useEffect(() => {\n        fetch('http://api.openweathermap.org/data/2.5/forecast?id=3590979&appid=d35ffbb008d9cbfc7bec181cf4685403&units=metric&lang=es')\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                console.log(data)\n                const [cityData, listData] = Clean5DaysForecastData(data);\n                setCity(cityData);\n                setList(listData);\n                console.log(listData);\n            });\n    }, [setList])\n    useEffect(() => {\n        list.forEach(item => {\n            const date = new Date(item.dt_txt)\n            console.log(weekdays(date.getDay()));\n        })\n    }, [list])\n    return (\n        <>\n            <h1 className={styles.title}>Next 5 days forecast</h1>\n\n            <Card >\n                {\n                    list.map((item, idx) => {\n                        const date = new Date(item.dt_txt)\n                        return <DailyWeather key={idx} weekDay={weekdays(date.getDay())} icon={item.weather[0].icon} />\n                    })\n                }\n                {/* <DailyWeather weekDay={'Thursday'} icon='03d' />\n                <DailyWeather weekDay={'Wednesday'} icon='01d' />\n                <DailyWeather weekDay={'Tuesday'} icon='02d' />\n                <DailyWeather weekDay={'Friday'} icon='01n' /> */}\n            </Card>\n        </>\n    );\n}\n\nexport default HomePage;","import { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Layout from './components/layout/Layout';\nimport HourlyForecastPage from './pages/HourlyForecastPage';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path='/hourlyForecast'>\n          <HourlyForecastPage />\n        </Route>\n        <Route path='/'>\n          <HomePage />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename='/weatherAppReact'>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}