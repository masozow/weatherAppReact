{"version":3,"sources":["pages/HomePage.module.css","components/layout/NavBar.module.css","components/layout/Layout.module.css","components/daily-weather/DailyWeather.module.css","components/layout/Card.module.css","components/menu/MenuButton.js","components/layout/NavBar.js","components/layout/Layout.js","pages/HourlyForecastPage.js","functionality/IconNameSelection.js","components/daily-weather/DailyWeather.js","components/layout/Card.js","functionality/DateStrings.js","functionality/DataPrepare.js","functionality/LocaleStrings.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","MenuButton","props","icon","faBars","NavBar","className","styles","logo","Layout","main","children","HourlyForecastPage","iconRelations","faSun","faMoon","faCloudSun","faCloud","faCloudRain","faCloudSunRain","faCloudMoonRain","faPooStorm","faSnowflake","faSmog","faRainbow","iconNameSelection","iconName","icons","DailyWeather","dailyWeatherCard","weekDay","dateTime","style","fontSize","temperature","description","Card","card","timeString","date","toLocaleTimeString","timeStyle","hourCycle","monthDay","lang","toLocaleDateString","month","day","dateString","Date","weekday","formattedDateTime","dateTimeText","monthDayString","time","firstCharToUpper","dataString","charAt","toUpperCase","slice","unitSystems","metric","imperial","formattedTemperature","temp","unitSystem","unitSystemsArray","formattedCity","data","name","country","homePageTitle","en","es","languaje","HomePage","useState","city","setCity","list","setList","useEffect","fetch","then","response","json","dataLength","length","filteredList","index","singleData","weather","dt","push","Clean5DaysForecastData","cityData","listData","console","log","title","subTitle","map","item","idx","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.33f3b514.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomePage_title__2SwkK\",\"subTitle\":\"HomePage_subTitle__14AE-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"NavBar_logo__2C6RD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dailyWeatherCard\":\"DailyWeather_dailyWeatherCard__3cc4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1ZQtN\"};","import { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction MenuButton(props) {\n    return (\n        <>\n            <FontAwesomeIcon icon={faBars} />\n        </>\n    );\n}\n\nexport default MenuButton;","// import { NavLink } from 'react-router-dom';\nimport MenuButton from '../menu/MenuButton';\nimport styles from './NavBar.module.css';\n\nfunction NavBar(props) {\n    return (\n        <header>\n            <div className={styles.logo}>\n                {/* <NavLink to='/'> */}\n                WeatherApp\n                {/* </NavLink> */}\n            </div>\n            <MenuButton />\n        </header>\n    );\n}\n\nexport default NavBar;\n","import NavBar from \"./NavBar\";\nimport styles from './Layout.module.css';\n\nfunction Layout(props) {\n    return (\n        <>\n            <NavBar />\n            <main className={styles.main}>\n                {props.children}\n            </main>\n        </>\n    );\n\n}\nexport default Layout;","function HourlyForecastPage(props) {\n    return (\n        <>\n            <h1>Forecast</h1>\n        </>\n    );\n}\nexport default HourlyForecastPage;","import { faSun, faCloudSun, faCloud, faCloudRain, faCloudSunRain, faCloudMoonRain, faPooStorm, faSnowflake, faSmog, faRainbow, faMoon } from \"@fortawesome/free-solid-svg-icons\";\n///iconRelations keys according to openweather API available icons, and values\n///according to  available icons in fontawesome free package\nconst iconRelations = {\n    '01d': faSun,\n    '01n': faMoon,\n    '02d': faCloudSun,\n    '03d': faCloud,\n    '03n': faCloud,\n    '04d': faCloud,\n    '04n': faCloud,\n    '09d': faCloudRain,\n    '09n': faCloudRain,\n    '10d': faCloudSunRain,\n    '10n': faCloudMoonRain,\n    '11d': faPooStorm,\n    '11n': faPooStorm,\n    '13d': faSnowflake,\n    '13n': faSnowflake,\n    '50d': faSmog,\n    '50n': faSmog,\n    'default': faRainbow\n}\nexport function iconNameSelection(iconName = '', icons = iconRelations) {\n    if (icons[iconName] && iconName !== 'default') {\n        return icons[iconName];\n    }\n    else {\n        return icons['default'];\n    }\n}\n\n/*\n    icons:\n    openweather=fontAwesome\n    01d=faSun\n    02d=faCloudSun\n    03d=03n=faCloud\n    04d=04n=faClouds(just faCloud, bc faClouds is pro)\n    09d=09n=faCloudRain\n    10d=faCloudSunRain\n    11d=11n=faPooStorm\n    13d=13n=faSnowFlake\n    50d=50n=faSmog (bc fog is pro)\n    01n=faMoon\n    02n=faCloudMoon\n    10n=faCloudMoonRain\n*/","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport styles from './DailyWeather.module.css';\nimport { iconNameSelection } from \"../../functionality/IconNameSelection\";\n\nfunction DailyWeather(props) {\n    return (\n        <div className={styles.dailyWeatherCard}>\n            <h3>{props.weekDay}</h3>\n            <p>{props.dateTime}</p>\n            <FontAwesomeIcon icon={iconNameSelection(props.icon)} style={{ fontSize: '5rem' }} />\n            <h2>{props.temperature}</h2>\n            <h4>{props.description}</h4>\n        </div>\n    );\n}\n\nexport default DailyWeather;","import styles from './Card.module.css';\n\nfunction Card(props) {\n    return (\n        <div className={styles.card}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Card;","export function timeString(date, lang = 'en') {\n    return date.toLocaleTimeString('en', { timeStyle: 'short', hourCycle: 'h24' });\n};\n\nexport function monthDay(date, lang = 'en') {\n    return date.toLocaleDateString(lang, { month: 'long', day: 'numeric' });\n}\n\nexport function weekDay(dateString, lang = 'en') {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(lang, { weekday: 'long' });\n}","import { monthDay, timeString, weekDay } from \"./DateStrings\";\n\nfunction formattedDateTime(dateTimeText, lang = 'en', formattingDateFunction = monthDay, formattingTimeFunction = timeString) {\n    const date = new Date(dateTimeText);\n    const monthDayString = monthDay(date, lang);\n    const time = timeString(date, lang);\n    return `${monthDayString}, ${time}`;\n}\n\nfunction firstCharToUpper(dataString = '') {\n    return dataString.charAt(0).toUpperCase() + dataString.slice(1);\n}\n\nconst unitSystems = {\n    metric: 'C',\n    imperial: 'F'\n}\n\nfunction formattedTemperature(temp = 0, unitSystem = 'metric', unitSystemsArray = unitSystems) {\n    return `${temp} °${unitSystemsArray[unitSystem]}`;\n}\n\nfunction formattedCity(data = '') {\n    return data.name + ', ' + data.country;\n}\n\nexport function Clean5DaysForecastData(data, lang = 'en', unitSystem = unitSystems['metric']) {\n    const city = formattedCity(data.city);\n    const dataLength = data.list.length;\n    const filteredList = [];\n    for (let index = 0; index < dataLength; index += 8) {\n        const singleData = {};\n        singleData['description'] = firstCharToUpper(data.list[index].weather[0].description);\n        singleData['temperature'] = formattedTemperature(data.list[index].main.temp, unitSystem);\n        singleData['dateTime'] = formattedDateTime(data.list[index].dt * 1000, lang);\n        singleData['weekDay'] = firstCharToUpper(weekDay(data.list[index].dt * 1000, lang));\n        singleData['icon'] = data.list[index].weather[0].icon;\n        filteredList.push(singleData);\n    }\n    //This part costs more computing time \n    // const filteredList = data.list.filter((value, index) => {\n    //     return index % 8 === 0;\n    // });\n    return [city, filteredList];\n}\n\n","export const homePageTitle = {\n    en: 'Next 5 days forecast',\n    es: 'Pronóstico para los próximos 5 días'\n};","import { useEffect, useState } from \"react\";\nimport DailyWeather from \"../components/daily-weather/DailyWeather\";\nimport Card from \"../components/layout/Card\";\nimport styles from './HomePage.module.css';\nimport { Clean5DaysForecastData } from \"../functionality/DataPrepare\";\nimport { homePageTitle } from \"../functionality/LocaleStrings\";\n\nconst languaje = 'es';\nconst unitSystem = 'metric';\n\nfunction HomePage(props) {\n    const [city, setCity] = useState('');\n    const [list, setList] = useState([]);\n\n    useEffect(() => {\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?id=3590979&appid=d35ffbb008d9cbfc7bec181cf4685403&units=${unitSystem}&lang=${languaje}`)\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                const [cityData, listData] = Clean5DaysForecastData(data, languaje, unitSystem);\n                setCity(cityData);\n                setList(listData);\n            });\n    }, [setCity, setList]);\n\n    useEffect(() => {\n        console.log(list);\n        console.log(city);\n    }, [list, city])\n\n    return (\n        <>\n            <h1 className={styles.title}>{homePageTitle[languaje]}</h1>\n            <Card >\n                <h3 className={styles.subTitle}>{city}</h3>\n\n                {\n                    list.map((item, idx) => {\n                        return (\n                            <DailyWeather\n                                key={idx}\n                                weekDay={item.weekDay}\n                                dateTime={item.dateTime}\n                                icon={item.icon}\n                                description={item.description}\n                                temperature={item.temperature}\n                            />\n                        )\n                    })\n                }\n\n            </Card>\n        </>\n    );\n}\n\nexport default HomePage;","import { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Layout from './components/layout/Layout';\nimport HourlyForecastPage from './pages/HourlyForecastPage';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path='/hourlyForecast'>\n          <HourlyForecastPage />\n        </Route>\n        <Route path='/'>\n          <HomePage />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename='/weatherAppReact'>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}